import pandas as pd
import os
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

data = {'equipment_id': [1, 2, 3],
        'sensor_1': [100, 200, 300],
        'sensor_2': [50, 20, 10],
        'failure': [0, 1, 0]}

df = pd.DataFrame(data)
if not os.path.exists('sensor_data.csv'):
    df.to_csv('sensor_data.csv', index=False)

maintenance_data = {'equipment_id': [1, 2, 3],
                     'maintenance_date': ['2023-10-04', '2023-12-15', '2023-08-21'],
                     'maintenance_action': ['Oil change', 'Part replacement', 'Software update']}

df = pd.DataFrame(maintenance_data)
if not os.path.exists('maintenance_records.csv'):
    df.to_csv('maintenance_records.csv', index=False)

sensor_data = pd.read_csv('sensor_data.csv')
maintenance_records = pd.read_csv('maintenance_records.csv')

merged_data = sensor_data.merge(maintenance_records, on='equipment_id')

X = merged_data.drop('failure', axis=1)
y = merged_data['failure']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

predictions = model.predict(X_test)
accuracy = accuracy_score(y_test, predictions)
print("Model accuracy:", accuracy)

new_sensor_data = pd.read_csv('new_sensor_data.csv')  # Replace with your new data
predicted_failures = model.predict(new_sensor_data)

high_risk_equipment = new_sensor_data[predicted_failures > 0.8]

def send_alerts(high_risk_equipment):
    pass

def schedule_maintenance(high_risk_equipment):
    pass

send_alerts(high_risk_equipment)
schedule_maintenance(high_risk_equipment)
